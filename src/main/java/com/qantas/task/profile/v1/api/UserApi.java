/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.qantas.task.profile.v1.api;

import com.qantas.task.profile.v1.model.UserRequest;
import com.qantas.task.profile.v1.model.UserResponse;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-06-17T11:50:16.623+10:00")

@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "Add a new user profile", notes = "", response = UserResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation", response = UserResponse.class),
        @ApiResponse(code = 400, message = "Invalid input", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error", response = Void.class) })
    
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<UserResponse> addUserProfile(@ApiParam(value = "Profile object that needs to be added" ,required=true )  @Valid @RequestBody UserRequest body);


    @ApiOperation(value = "Deletes a user profile", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "User not found", response = Void.class) })
    
    @RequestMapping(value = "/user/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserProfile(@ApiParam(value = "ID of user to delete",required=true ) @PathVariable("userId") String userId);


    @ApiOperation(value = "Update an existing user profile", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid input", response = Void.class),
        @ApiResponse(code = 404, message = "User not found", response = Void.class),
        @ApiResponse(code = 405, message = "Validation exception", response = Void.class) })
    
    @RequestMapping(value = "/user/{userId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUserProfile(@ApiParam(value = "ID of user to return",required=true ) @PathVariable("userId") String userId,@ApiParam(value = "Profile object that needs to be updated" ,required=true )  @Valid @RequestBody UserRequest body);

}
